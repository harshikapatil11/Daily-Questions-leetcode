46. LRU Cache


from collections import OrderedDict

class LRUCache(object):
    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cache = OrderedDict()
        self.capacity = capacity

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key not in self.cache:
            return -1
        value = self.cache.pop(key)  # Remove and reinsert to update order
        self.cache[key] = value
        return value

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if key in self.cache:
            self.cache.pop(key)  # Remove and reinsert to update order
        elif len(self.cache) >= self.capacity:
            self.cache.popitem(last=False)  # Remove LRU item (FIFO behavior)
        self.cache[key] = value
